substitutions:
  # Phases of the Voice Assistant
  # The voice assistant is ready to be triggered by a wake word
  voice_assist_idle_phase_id: '1'
  # The voice assistant is waiting for a voice command (after being triggered by the wake word)
  voice_assist_waiting_for_command_phase_id: '2'
  # The voice assistant is listening for a voice command
  voice_assist_listening_for_command_phase_id: '3'
  # The voice assistant is currently processing the command
  voice_assist_thinking_phase_id: '4'
  # The voice assistant is replying to the command
  voice_assist_replying_phase_id: '5'
  # The voice assistant is not ready
  voice_assist_not_ready_phase_id: '10'
  # The voice assistant encountered an error
  voice_assist_error_phase_id: '11'
  # The voice assistant is muted and will not reply to a wake word
  voice_assist_muted_phase_id: '12'

esphome:
  name: esphome-voice-kit
  friendly_name: ESPHome Voice Kit
  name_add_mac_suffix: true
  platformio_options:
    board_build.flash_mode: dio
  project:
    name: esphome.voice-kit
    version: "1.0"
  on_boot:
    priority: 600
    then:
      - if:
          condition:
            binary_sensor.is_on: mute_switch
          then:
            - light.turn_on:
                brightness: 50%
                id: leds_remapped
                effect: "Muted"
          else:
            - light.turn_off: leds_remapped

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_ESP32_S3_BOX_BOARD: "y"
      # CONFIG_FREERTOS_USE_TRACE_FACILITY: "y"
      # CONFIG_FREERTOS_GENERATE_RUN_TIME_STATS: "y"

wifi:
  ap:

logger:
  level: DEBUG
  logs:
    sensor: WARN  # avoids logging debug sensor updates

api:

ota:
  - platform: esphome

improv_serial:

psram:
  mode: octal
  speed: 80MHz

globals:
  # Global index for our LEDs. So that switching between different animation does not led to unwanted effects.
  - id: global_led_animation_index
    type: int
    restore_value: no
    initial_value: '0'
  # Global initialisation variable. Initialized to true and set to fasle once everything is connected. Only used to have a smooth "plugging" experience
  - id: init_in_progress
    type: bool
    restore_value: no
    initial_value: 'true'
  # Global variable tracking the pahse of the voice assistant (defined above). Initialized to not_ready
  - id: voice_assistant_phase
    type: int
    restore_value: no
    initial_value: ${voice_assist_not_ready_phase_id}

binary_sensor:
  - platform: gpio
    id: center_button
    pin:
      number: GPIO17
      inverted: true

  - platform: gpio
    id: mute_switch
    name: Muted
    pin: GPIO3
    on_press:
      - light.turn_on:
          brightness: 50%
          id: leds_remapped
          effect: "Muted"
    on_release:
      - light.turn_off: leds_remapped



number:
  - platform: template
    id: fake_volume
    internal: true
    optimistic: true
    min_value: 0
    max_value: 12
    initial_value: 12
    step: 1

light:
  - platform: esp32_rmt_led_strip
    id: leds_internal
    pin: GPIO21
    rmt_channel: 1
    num_leds: 12
    rgb_order: GRB
    chipset: WS2812
    default_transition_length: 0ms
    power_supply: led_power
  - platform: partition
    name: LEDs remapped
    id: leds_remapped
    default_transition_length: 0ms
    segments:
      - id: leds_internal
        from: 7
        to: 11
      - id: leds_internal
        from: 0
        to: 6
    effects:
      - addressable_lambda:
          name: "Waiting for Command"
          update_interval: 100ms
          lambda: |-
            auto light_color = id(leds_remapped).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (i == id(global_led_animation_index) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 11) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 10) % 12) {
                it[i] = color * 128;
              } else if (i == (id(global_led_animation_index) + 6) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 5) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 4) % 12) {
                it[i] = color * 128;
              } else {
                it[i] = Color::BLACK;
              }
            }
            id(global_led_animation_index) = (id(global_led_animation_index) + 1) % 12;
      - addressable_lambda:
          name: "Listening For Command"
          update_interval: 50ms
          lambda: |-
            auto light_color = id(leds_remapped).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (i == id(global_led_animation_index) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 11) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 10) % 12) {
                it[i] = color * 128;
              } else if (i == (id(global_led_animation_index) + 6) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 5) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 4) % 12) {
                it[i] = color * 128;
              } else {
                it[i] = Color::BLACK;
              }
            }
            id(global_led_animation_index) = (id(global_led_animation_index) + 1) % 12;
      - addressable_lambda:
          name: "Thinking"
          update_interval: 10ms
          lambda: |-
            static uint8_t brightness_step = 0;
            static bool brightness_decreasing = true;
            static uint8_t brightness_step_number = 10;
            if (initial_run) {
              brightness_step = 0;
              brightness_decreasing = true;
            }
            auto light_color = id(leds_remapped).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (i == id(global_led_animation_index) % 12) {
                it[i] = color * uint8_t(255/brightness_step_number*(brightness_step_number-brightness_step));
              } else if (i == (id(global_led_animation_index) + 6) % 12) {
                it[i] = color * uint8_t(255/brightness_step_number*(brightness_step_number-brightness_step));
              } else {
                it[i] = Color::BLACK;
              }
            }
            if (brightness_decreasing) {
              brightness_step++;
            } else {
              brightness_step--;
            }
            if (brightness_step == 0 || brightness_step == brightness_step_number) {
              brightness_decreasing = !brightness_decreasing;
            }
      - addressable_lambda:
          name: "Replying"
          update_interval: 50ms
          lambda: |-
            id(global_led_animation_index) = (12 + id(global_led_animation_index) - 1) % 12;
            auto light_color = id(leds_remapped).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (i == (id(global_led_animation_index)) % 12) {
                it[i] = color;
              } else if (i == ( id(global_led_animation_index) + 1) % 12) {
                it[i] = color * 192;
              } else if (i == ( id(global_led_animation_index) + 2) % 12) {
                it[i] = color * 128;
              } else if (i == ( id(global_led_animation_index) + 6) % 12) {
                it[i] = color;
              } else if (i == ( id(global_led_animation_index) + 7) % 12) {
                it[i] = color * 192;
              } else if (i == ( id(global_led_animation_index) + 8) % 12) {
                it[i] = color * 128;
              } else {
                it[i] = Color::BLACK;
              }
            }
      - addressable_lambda:
          name: "Muted"
          update_interval: 1s
          lambda: |-
            static int8_t index = 0;
            Color color(255, 0, 0);
            for (int i = 0; i < 12; i++) {
              if (i == 2) {
                it[i] = color;
              } else if (i == 3) {
                it[i] = color;
              } else if (i == 8) {
                it[i] = color;
              } else if (i == 9) {
                it[i] = color;
              } else {
                it[i] = Color::BLACK;
              }
            }
      - addressable_lambda:
          name: "Volume Display"
          update_interval: 50ms
          lambda: |-
            auto light_color = id(leds_remapped).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            auto nb_leds_on = id(fake_volume).state;
            for (int i = 0; i < 12; i++) {
              if (i < nb_leds_on) {
                it[i] = color;
              } else {
                it[i] = Color::BLACK;
              }
            }
      - addressable_rainbow:
          width: 12
      - addressable_twinkle:
          twinkle_probability: 50%
      - addressable_random_twinkle:
          twinkle_probability: 50%
      - addressable_scan:
          move_interval: 10ms
          scan_width: 3

power_supply:
  - id: led_power
    pin: GPIO45

sensor:
  - platform: rotary_encoder
    id: dial
    pin_a: GPIO16
    pin_b: GPIO18
    on_clockwise:
      - script.execute: increase_volume
    on_anticlockwise:
      - script.execute: decrease_volume

  - platform: debug
    free:
      name: "Heap Free"
    block:
      name: "Max Block Free"
    loop_time:
      name: "Loop Time"
    psram:
      name: "PSRAM Free"

script:
  - id: increase_volume
    mode: restart
    then:
      - number.increment:
          id: fake_volume
          cycle: false
      - light.turn_on:
          brightness: 100%
          id: leds_remapped
          effect: "Volume Display"
      - delay: 2s
      - light.turn_off: leds_remapped
  - id: decrease_volume
    mode: restart
    then:
      - number.decrement:
          id: fake_volume
          cycle: false
      - light.turn_on:
          brightness: 100%
          id: leds_remapped
          effect: "Volume Display"
      - delay: 2s
      - light.turn_off: leds_remapped


i2s_audio:
  - id: i2s_input
    i2s_lrclk_pin:
      number: GPIO7
      allow_other_uses: true
    i2s_bclk_pin:
      number: GPIO8
      allow_other_uses: true
    i2s_mclk_pin:
      number: GPIO9
      allow_other_uses: true
    i2s_mode: secondary
  - id: i2s_output
    i2s_lrclk_pin:
      number: GPIO7
      allow_other_uses: true
    i2s_bclk_pin:
      number: GPIO8
      allow_other_uses: true
    i2s_mclk_pin:
      number: GPIO9
      allow_other_uses: true
    i2s_mode: secondary
  # i2s_output data pin is gpio10

  # This describes the second I2S interface between ESP32 and XMOS chip. Currently unused.
  # - id: i2s_output
  #   i2s_lrclk_pin:
  #     number: GPIO14
  #     # allow_other_uses: true
  #   i2s_bclk_pin:
  #     number: GPIO13
  #     # allow_other_uses: true
  #   i2s_mclk_pin:
  #     number: GPIO12
  #     # allow_other_uses: true
  #   i2s_mode: primary #secondary
  # data line is GPIO15

microphone:
  - platform: i2s_audio
    id: kit_mic
    i2s_din_pin: GPIO11
    adc_type: external
    pdm: false
    bits_per_sample: 32bit
    channel: right
    i2s_audio_id: i2s_input

media_player:
  - platform: nabu
    id: nabu_media_player
    name: nabu_media_player
    internal: false
    i2s_dout_pin: GPIO10
    bits_per_sample: 32bit
    i2s_audio_id: i2s_output

file:
  - id: timer_finished_wave_file
    file: https://github.com/esphome/firmware/raw/main/voice-assistant/sounds/timer_finished.wav

external_components:
  - source: github://jesserockz/esphome-components
    components: [file, udp_audio]
    refresh: 0s
  - source:
      type: git
      url: https://github.com/esphome/voice-kit
      ref: dev
    components: [i2s_audio, nabu, voice_assistant, media_player, micro_wake_word]

micro_wake_word:
  models:
    - model: okay_nabu
  vad:
  on_wake_word_detected:
    - voice_assistant.start:
        wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: kit_mic
  media_player: nabu_media_player
  use_wake_word: false
  noise_suppression_level: 0
  auto_gain: 0 dbfs
  volume_multiplier: 1
  on_client_connected:
    - micro_wake_word.start:
  on_client_disconnected:
    - micro_wake_word.stop:
    - voice_assistant.stop:
  on_start:
    - lambda: id(nabu_media_player).set_ducking_ratio(0.25);
  on_listening:
    - light.turn_on:
        brightness: 100%
        id: leds_remapped
        effect: "Waiting for Command"
  on_stt_vad_start:
    - light.turn_on:
        brightness: 100%
        id: leds_remapped
        effect: "Listening For Command"
  on_stt_vad_end:
    - light.turn_on:
        brightness: 100%
        id: leds_remapped
        effect: "Thinking"
  on_tts_start:
    - light.turn_on:
        brightness: 100%
        id: leds_remapped
        effect: "Replying"
  on_end:
    - wait_until:
        not:
          voice_assistant.is_running:
    - lambda: id(nabu_media_player).set_ducking_ratio(1.0);
    - micro_wake_word.start:
    - light.turn_off: leds_remapped

button:
  - platform: restart
    name: "Restart"

debug:
  update_interval: 5s
